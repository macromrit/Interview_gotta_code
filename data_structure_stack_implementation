#stack implementation with underflow and overflow considerations [LIFO]

stack = list()
overflow = int(input('enter the max. no. elements that your stack should accommodate[exclude 0 from your percievance]: '))
while True:
    print('''
0 -> break out from the process
1 -> push elements into the stack
2 -> pop elements outa the stack
3 -> to display the elements of the stack   
    ''')
    main_val = int(input("what's your choice-> "))
    

    if main_val == 0:
        print('Thanks for choosing us!!, had a goodtime I gather')
        break

    elif main_val==1:
        if len(stack)<overflow:
            val = input('input the member to be infused into the stack: ')
            stack.append(val)#or stack.insert(-1, val)
            print(F'Element {val} pushed into the stack successfully')
        else:
            print('Overflow Error bashed... appendizing process failed as the max limit exceeded')
    
    elif main_val==2:
        if len(stack)==0:
            print('Underflow Error bashed... poping process failed as the stack is null')
        else:
            print(F'Element {stack.pop()} was popped from the stack successfully')
    
    elif main_val==3:
        if len(stack)==0:
            print('Got no elements to display')
        else:
            for i in stack[::-1]:
                print(i)

    else:
        print('Unable to comprehend... please give a valid input')
